{"version":3,"sources":["redux/actions/index.js","redux/actions/changeSymbol.js","components/Ticker/Ticker.js","components/Chart/Chart.js","components/App/App.js","serviceWorker.js","redux/reducers/currentSymbol.js","redux/reducers/index.js","index.js"],"names":["allActions","changeSymbol","newSymbol","type","payload","Ticker","props","useState","curinput","setCurinput","disabled","setDisabled","Set","symbols","setSymbols","dispatch","useDispatch","currSymbol","useSelector","state","currentSymbol","useEffect","a","fetch","response","json","data","getValidSymbols","then","map","i","symbol","className","onSubmit","event","cleanInput","trim","toUpperCase","preventDefault","style","paddingRight","placeholder","value","onChange","target","length","has","Button","variant","float","borderRadius","Chart","chartLabels","verticalLines","pldata","dataLabel","quote","setQuote","high","setHigh","low","setLow","tick","console","log","undefined","getTickerData","week52High","week52Low","latestPrice","intQuote","Math","floor","third","mode","scaleID","borderColor","borderWidth","label","backgroundColor","content","enabled","labels","datasets","fill","lineTension","options","title","display","text","fontSize","legend","position","scales","yAxes","scaleLabel","labelString","ticks","callback","index","values","xAxes","annotation","drawTime","annotations","App","src","verticalAlign","alt","Boolean","window","location","hostname","match","action","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d8c8932.chunk.js","sourcesContent":["import changeSymbol from './changeSymbol'\r\n\r\nconst allActions = {\r\n    changeSymbol\r\n}\r\n\r\nexport default allActions","const changeSymbol = (newSymbol) => {\r\n    return {\r\n        type: \"CHANGE_SYMBOL\",\r\n        payload: newSymbol\r\n    }\r\n}\r\n\r\nexport default changeSymbol;","import React, { useState, useEffect } from 'react';\r\nimport './Ticker.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport allActions from '../../redux/actions'\r\n\r\nfunction Ticker(props) {\r\n  const [curinput, setCurinput] = useState('');\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [symbols, setSymbols] = useState(new Set());\r\n  const dispatch = useDispatch();\r\n  const currSymbol = useSelector(state => state.currentSymbol)\r\n\r\n  useEffect(() => {\r\n    async function getValidSymbols() {\r\n      let response = await fetch('https://cloud.iexapis.com/stable/ref-data/iex/symbols?token=' + process.env.REACT_APP_IEX_API_KEY);\r\n      let data = await response.json();\r\n      return data;\r\n    }\r\n    getValidSymbols().then(data => {\r\n      setSymbols(new Set(data.map(i => i.symbol)));\r\n    });  \r\n  }, []);\r\n\r\n  function handleChange(event) {\r\n    const cleanInput = event.target.value.trim().toUpperCase();\r\n    if (cleanInput.length <= 5 && symbols.has(cleanInput)) {\r\n      setDisabled(false);\r\n    } else{ \r\n      setDisabled(true);\r\n    }\r\n    setCurinput(event.target.value);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    let cleanInput = curinput.trim().toUpperCase();\r\n    if (cleanInput !== currSymbol) {\r\n      dispatch(allActions.changeSymbol(cleanInput))\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div className=\"Ticker-div\"> \r\n      <form onSubmit={handleSubmit}>\r\n        <label style={{paddingRight:\"5px\"}}>\r\n          <input type=\"text\" placeholder=\"Enter Ticker Symbol Here\" value={curinput} onChange={handleChange} className=\"Ticker-searchbar\" />\r\n        </label>\r\n        <Button variant=\"outline-primary\" type=\"submit\" disabled={disabled} style={{float:\"center\", borderRadius: \"0px\"}}>Submit</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ticker;","import React, { useState, useEffect } from 'react';\r\nimport './Chart.css';\r\nimport {Line} from 'react-chartjs-2';\r\nimport 'chartjs-plugin-annotation';\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction Chart (props) {\r\n  let chartLabels = []; \r\n  let verticalLines = [];\r\n  let pldata = []\r\n  let dataLabel = \"\";\r\n  const [quote, setQuote] = useState(0);\r\n  const [high, setHigh] = useState(0); \r\n  const [low, setLow] = useState(0);\r\n  const symbol = useSelector(state => state.currentSymbol)\r\n\r\n  useEffect(() => {\r\n    async function getTickerData(tick) {\r\n      console.log(tick);\r\n      let response = await fetch('https://cloud.iexapis.com/stable/stock/' + tick + '/quote?token=' + process.env.REACT_APP_IEX_API_KEY);\r\n      let data = await response.json();\r\n      return data;\r\n    }\r\n    if (symbol !== undefined ){\r\n      getTickerData(symbol).then(data => {\r\n        setHigh(data.week52High);\r\n        setLow(data.week52Low);\r\n        setQuote(data.latestPrice);\r\n      });\r\n    }\r\n  }, [symbol]);\r\n  \r\n  if (high !== 0){\r\n    const intQuote = Math.floor(quote / 5) * 5;\r\n    let third = (quote - intQuote) * 100 - 150; \r\n    if (quote < intQuote) { \r\n      third = -150;\r\n    }\r\n    pldata = [-150, -150, third, (high - intQuote) * 100 - 150, 2 * (high - intQuote) * 100 - 150]\r\n    dataLabel = \"Long \" + intQuote + \" call @ 1.50\";\r\n    chartLabels = [0, low, quote, high, high + high - quote];\r\n    verticalLines = [\r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 1,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 2,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"52 wk Low\",\r\n          enabled: true\r\n        }\r\n      },\r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 2,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 2,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"Current Price\",\r\n          enabled: true\r\n        }\r\n      } , \r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 3,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 2,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"52 wk High\",\r\n          enabled: true\r\n        }\r\n      }      \r\n    ];\r\n  }\r\n  const state = {\r\n    labels: chartLabels,\r\n    datasets: [\r\n      {\r\n        \r\n        label: dataLabel,\r\n        fill: false,\r\n        lineTension: 0,\r\n        backgroundColor: 'rgba(75,192,192,1)',\r\n        borderColor: 'rgba(0,0,0,1)',\r\n        borderWidth: 2,\r\n        data: pldata,\r\n      }\r\n    ]\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chart-div\">\r\n      <Line\r\n        data={state}\r\n        options={{\r\n          title:{\r\n            display:true,\r\n            text: (symbol === undefined ? \"\" : symbol) + \" Profit/Loss Chart\",\r\n            fontSize:20\r\n          },\r\n          legend:{\r\n            display:true,\r\n            position:'right'\r\n          },\r\n          scales:{\r\n            yAxes: [{\r\n              scaleLabel: {\r\n                display: true, \r\n                labelString: 'Profit or Loss',\r\n                fontSize: 18\r\n              },\r\n              ticks: {\r\n                callback: function(value, index, values) { \r\n                  return '$' + value;\r\n                }\r\n              }\r\n            }],\r\n            xAxes: [{\r\n              scaleLabel: {\r\n                display: true, \r\n                labelString: 'Price at Expiration',\r\n                fontSize: 18\r\n              },\r\n              ticks: {\r\n                callback: function(value, index, values) { \r\n                  return '$' + value;\r\n                }\r\n              }\r\n            }]\r\n          }, \r\n          annotation: {\r\n            drawTime: 'beforeDatasetsDraw',\r\n            annotations: verticalLines,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport './App.css';\r\n//components \r\nimport Ticker from '../Ticker/Ticker';\r\nimport Chart from '../Chart/Chart';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div>\r\n          Options Visualizer &nbsp;    \r\n        <img src={process.env.PUBLIC_URL + '/favicon.ico'} style={{verticalAlign: \"middle\"}} alt=\"Logo\"></img>\r\n        </div>\r\n      </header>\r\n      <Ticker />\r\n      <Chart />\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const currentSymbol = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_SYMBOL':\r\n      return action.payload\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default currentSymbol;","import currentSymbol from './currentSymbol'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    currentSymbol\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore} from 'redux'\r\nimport rootReducer from './redux/reducers'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}