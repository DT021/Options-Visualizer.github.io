{"version":3,"sources":["components/App/App.js","components/Chart/Chart.js","components/Ticker/Ticker.js","serviceWorker.js","index.js"],"names":["App","className","src","style","verticalAlign","alt","Chart","info","console","log","ticker","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","options","title","display","text","fontSize","legend","position","Ticker","useState","curinput","setCurinput","disabled","setDisabled","setTicker","quote","setQuote","finnhub","require","ApiClient","instance","authentications","apiKey","process","finnhubClient","DefaultApi","onSubmit","event","trim","toUpperCase","preventDefault","type","placeholder","value","onChange","target","error","response","undefined","c","Button","variant","float","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sSAiBeA,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uDAGA,yBAAKC,IAA8B,eAAgBC,MAAO,CAACC,cAAe,UAAWC,IAAI,a,gCCgClFC,MArCf,SAAeC,GAiBb,OAhBAC,QAAQC,IAAIF,EAAKG,QAiBf,yBAAKT,UAAU,aACb,kBAAC,IAAD,CACEU,KAlBQ,CACZC,OAAQ,CAAC,UAAW,WAAY,QACvB,QAAS,OAClBC,SAAU,CACR,CACEC,MAAO,WACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,qBACjBC,YAAa,gBACbC,YAAa,EACbR,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,OAQvBS,QAAS,CACPC,MAAM,CACJC,SAAQ,EACRC,KAAMhB,EAAKG,OAAS,aACpBc,SAAS,IAEXC,OAAO,CACLH,SAAQ,EACRI,SAAS,c,QCeNC,MA5Cf,WAAmB,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEgBF,oBAAS,GAFzB,mBAETG,EAFS,KAECC,EAFD,OAGYJ,mBAAS,IAHrB,mBAGTlB,EAHS,KAGDuB,EAHC,OAIUL,mBAAS,IAJnB,mBAITM,EAJS,KAIFC,EAJE,KAMVC,EAAUC,EAAQ,KAERD,EAAQE,UAAUC,SAASC,gBAA3B,QACRC,OAASC,uBACjB,IAAMC,EAAgB,IAAIP,EAAQQ,WAmBlC,OACE,6BACE,yBAAK3C,UAAU,cACb,0BAAM4C,SARZ,SAAsBC,GACpBb,EAAUJ,EAASkB,OAAOC,eAC1BF,EAAMG,mBAOA,+BACE,2BAAOC,KAAK,OAAOC,YAAY,2BAA2BC,MAAOvB,EAAUwB,SAtBrF,SAAsBP,GACpBH,EAAcT,MAAMY,EAAMQ,OAAOF,MAAML,OAAOC,eAAe,SAACO,EAAO5C,EAAM6C,QAC1DC,IAAX9C,EAAK+C,GACP1B,GAAY,GACZG,EAASxB,EAAK+C,IAEd1B,GAAY,MAGhBF,EAAYgB,EAAMQ,OAAOF,QAakFnD,UAAU,sBAE/G,kBAAC0D,EAAA,EAAD,CAAQC,QAAQ,kBAAkBV,KAAK,SAASnB,SAAUA,EAAU5B,MAAO,CAAC0D,MAAM,WAAlF,YAGH,kBAAC,EAAD,CAAOnD,OAAQA,EAAQwB,MAAOA,MChCjB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACL/C,QAAQ+C,MAAMA,EAAMwB,a","file":"static/js/main.a841dcb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div>\r\n          Options Visualizer &nbsp;    \r\n        \r\n        <img src={process.env.PUBLIC_URL + '/favicon.ico'} style={{verticalAlign: \"middle\"}} alt=\"Logo\"></img>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './Chart.css';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n\r\nfunction Chart(info) {\r\n  console.log(info.ticker);\r\n  const state = {\r\n    labels: ['January', 'February', 'March',\r\n             'April', 'May'],\r\n    datasets: [\r\n      {\r\n        label: 'Rainfall',\r\n        fill: false,\r\n        lineTension: 0.5,\r\n        backgroundColor: 'rgba(75,192,192,1)',\r\n        borderColor: 'rgba(0,0,0,1)',\r\n        borderWidth: 2,\r\n        data: [65, 59, 80, 81, 56]\r\n      }\r\n    ]\r\n  }\r\n  return (\r\n    <div className=\"Chart-div\">\r\n      <Line\r\n        data={state}\r\n        options={{\r\n          title:{\r\n            display:true,\r\n            text: info.ticker + \" P/L Chart\",\r\n            fontSize:20\r\n          },\r\n          legend:{\r\n            display:true,\r\n            position:'right'\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useState } from 'react';\r\nimport './Ticker.css';\r\nimport Chart from '../Chart/Chart'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Ticker() {\r\n  const [curinput, setCurinput] = useState('');\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [ticker, setTicker] = useState('');\r\n  const [quote, setQuote] = useState('');\r\n\r\n  const finnhub = require('finnhub');\r\n \r\n  const api_key = finnhub.ApiClient.instance.authentications['api_key'];\r\n  api_key.apiKey = process.env.REACT_APP_API_KEY; \r\n  const finnhubClient = new finnhub.DefaultApi()\r\n   \r\n  function handleChange(event) {\r\n    finnhubClient.quote(event.target.value.trim().toUpperCase(), (error, data, response) => {\r\n      if (data.c !== undefined){ \r\n        setDisabled(false);\r\n        setQuote(data.c); \r\n      } else{ \r\n        setDisabled(true);\r\n      }\r\n    });\r\n    setCurinput(event.target.value);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    setTicker(curinput.trim().toUpperCase()); \r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Ticker-div\"> \r\n        <form onSubmit={handleSubmit}>\r\n          <label>\r\n            <input type=\"text\" placeholder=\"Enter Ticker Symbol Here\" value={curinput} onChange={handleChange} className=\"Ticker-searchbar\" />\r\n          </label>\r\n          <Button variant=\"outline-primary\" type=\"submit\" disabled={disabled} style={{float:\"center\"}}>Submit</Button>\r\n        </form>\r\n      </div>\r\n       <Chart ticker={ticker} quote={quote} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ticker;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport Ticker from './components/Ticker/Ticker'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    <Ticker />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}