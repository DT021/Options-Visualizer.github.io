{"version":3,"sources":["redux.js","components/Ticker/Ticker.js","components/Chart/Chart.js","components/App/App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","action","type","ticker","payload","window","__REDUX_DEVTOOLS_EXTENSION__","connect","changeTickerAction","props","useState","curinput","setCurinput","disabled","setDisabled","Set","symbols","setSymbols","useEffect","a","console","log","fetch","response","json","data","getValidSymbols","then","map","i","symbol","className","onSubmit","event","cleanInput","trim","toUpperCase","preventDefault","style","paddingRight","placeholder","value","onChange","target","length","has","Button","variant","float","borderRadius","chartLabels","verticalLines","pldata","dataLabel","quote","setQuote","high","setHigh","low","setLow","tick","undefined","getTickerData","week52High","week52Low","latestPrice","intQuote","Math","floor","third","mode","scaleID","borderColor","borderWidth","label","backgroundColor","content","enabled","labels","datasets","fill","lineTension","options","title","display","text","fontSize","legend","position","scales","yAxes","scaleLabel","labelString","ticks","callback","index","values","xAxes","annotation","drawTime","annotations","App","src","verticalAlign","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.691e29e9.chunk.js","sourcesContent":["import { createStore } from 'redux'\r\n\r\nconst initialState = {\r\n  ticker: ''\r\n};\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  initialState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n// Reducer\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case 'CHANGE_TICKER':\r\n      return {\r\n        ticker: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n// Actions\r\nexport const changeTickerAction = (ticker) => ({\r\n  type: 'CHANGE_TICKER',\r\n  payload: ticker\r\n});\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Ticker.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { changeTickerAction } from '../../redux';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Ticker(props) {\r\n  const [curinput, setCurinput] = useState('');\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [symbols, setSymbols] = useState(new Set());\r\n  useEffect(() => {\r\n    async function getValidSymbols() {\r\n      console.log(\"got the symbols boss\");\r\n      let response = await fetch('https://cloud.iexapis.com/stable/ref-data/iex/symbols?token=' + process.env.REACT_APP_IEX_API_KEY);\r\n      let data = await response.json();\r\n      return data;\r\n    }\r\n    getValidSymbols().then(data => {\r\n      setSymbols(new Set(data.map(i => i.symbol)));\r\n    });  \r\n  }, []);\r\n\r\n  function handleChange(event) {\r\n    const cleanInput = event.target.value.trim().toUpperCase();\r\n    if (cleanInput.length <= 5 && symbols.has(cleanInput)) {\r\n      setDisabled(false);\r\n    } else{ \r\n      setDisabled(true);\r\n    }\r\n    setCurinput(event.target.value);\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    let cleanInput = curinput.trim().toUpperCase();\r\n    props.changeTickerAction({\r\n      ticker: cleanInput\r\n    })\r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div className=\"Ticker-div\"> \r\n      <form onSubmit={handleSubmit}>\r\n        <label style={{paddingRight:\"5px\"}}>\r\n          <input type=\"text\" placeholder=\"Enter Ticker Symbol Here\" value={curinput} onChange={handleChange} className=\"Ticker-searchbar\" />\r\n        </label>\r\n        <Button variant=\"outline-primary\" type=\"submit\" disabled={disabled} style={{float:\"center\", borderRadius: \"0px\"}}>Submit</Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  ticker: state.ticker\r\n});\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps, \r\n  { changeTickerAction }\r\n)(Ticker);","import React, { useState, useEffect } from 'react';\r\nimport './Chart.css';\r\nimport {Line} from 'react-chartjs-2';\r\nimport 'chartjs-plugin-annotation';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nfunction Chart (props) {\r\n  let chartLabels = []; \r\n  let verticalLines = [];\r\n  let pldata = []\r\n  let dataLabel = \"\";\r\n  const [quote, setQuote] = useState(0);\r\n  const [high, setHigh] = useState(0); \r\n  const [low, setLow] = useState(0);\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function getTickerData(tick) {\r\n      console.log(tick);\r\n      let response = await fetch('https://cloud.iexapis.com/stable/stock/' + tick + '/quote?token=' + process.env.REACT_APP_IEX_API_KEY);\r\n      let data = await response.json();\r\n      return data;\r\n    }\r\n    if (props.ticker.ticker !== undefined ){\r\n      getTickerData(props.ticker.ticker).then(data => {\r\n        setHigh(data.week52High);\r\n        setLow(data.week52Low);\r\n        setQuote(data.latestPrice);\r\n      });\r\n    }\r\n  }, [props.ticker]);\r\n  \r\n  if (high !== 0){\r\n    const intQuote = Math.floor(quote / 5) * 5;\r\n    let third = (quote - intQuote) * 100 - 150; \r\n    if (quote < intQuote) { \r\n      third = -150;\r\n    }\r\n    pldata = [-150, -150, third, (high - intQuote) * 100 - 150, 2 * (high - intQuote) * 100 - 150]\r\n    dataLabel = \"Long \" + intQuote + \" call @ 1.50\";\r\n    chartLabels = [0, low, quote, high, high + high - quote];\r\n    verticalLines = [\r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 1,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 2,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"52 wk Low\",\r\n          enabled: true\r\n        }\r\n      },\r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 2,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 2,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"Current Price\",\r\n          enabled: true\r\n        }\r\n      } , \r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 3,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 2,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"52 wk High\",\r\n          enabled: true\r\n        }\r\n      }      \r\n    ];\r\n  }\r\n  const state = {\r\n    labels: chartLabels,\r\n    datasets: [\r\n      {\r\n        \r\n        label: dataLabel,\r\n        fill: false,\r\n        lineTension: 0,\r\n        backgroundColor: 'rgba(75,192,192,1)',\r\n        borderColor: 'rgba(0,0,0,1)',\r\n        borderWidth: 2,\r\n        data: pldata,\r\n      }\r\n    ]\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chart-div\">\r\n      <Line\r\n        data={state}\r\n        options={{\r\n          title:{\r\n            display:true,\r\n            text: (props.ticker.ticker === undefined ? \"\" : props.ticker.ticker) + \" Profit/Loss Chart\",\r\n            fontSize:20\r\n          },\r\n          legend:{\r\n            display:true,\r\n            position:'right'\r\n          },\r\n          scales:{\r\n            yAxes: [{\r\n              scaleLabel: {\r\n                display: true, \r\n                labelString: 'Profit or Loss',\r\n                fontSize: 18\r\n              },\r\n              ticks: {\r\n                callback: function(value, index, values) { \r\n                  return '$' + value;\r\n                }\r\n              }\r\n            }],\r\n            xAxes: [{\r\n              scaleLabel: {\r\n                display: true, \r\n                labelString: 'Price at Expiration',\r\n                fontSize: 18\r\n              },\r\n              ticks: {\r\n                callback: function(value, index, values) { \r\n                  return '$' + value;\r\n                }\r\n              }\r\n            }]\r\n          }, \r\n          annotation: {\r\n            drawTime: 'beforeDatasetsDraw',\r\n            annotations: verticalLines,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  ticker: state.ticker\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps, \r\n)(Chart);","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux'; \r\nimport { store } from '../../redux';\r\n\r\n//components \r\nimport Ticker from '../Ticker/Ticker';\r\nimport Chart from '../Chart/Chart';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div>\r\n            Options Visualizer &nbsp;    \r\n          <img src={process.env.PUBLIC_URL + '/favicon.ico'} style={{verticalAlign: \"middle\"}} alt=\"Logo\"></img>\r\n          </div>\r\n        </header>\r\n        <Ticker />\r\n        <Chart />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}