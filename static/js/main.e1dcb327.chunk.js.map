{"version":3,"sources":["redux/actions/index.js","redux/actions/changeSymbol.js","components/Ticker/Ticker.js","components/Chart/Chart.js","components/App/App.js","serviceWorker.js","redux/reducers/currentSymbol.js","redux/reducers/index.js","index.js"],"names":["allActions","changeSymbol","newSymbol","type","payload","Ticker","props","useState","curinput","setCurinput","disabled","setDisabled","Set","symbols","setSymbols","dispatch","useDispatch","currSymbol","useSelector","state","currentSymbol","useEffect","a","fetch","process","REACT_APP_IEX_API_KEY","response","json","data","getValidSymbols","then","map","i","symbol","className","onSubmit","event","cleanInput","trim","toUpperCase","preventDefault","style","paddingRight","placeholder","value","onChange","target","length","has","Button","variant","float","borderRadius","Chart","chartLabels","verticalLines","pldata","dataLabel","quote","setQuote","high","setHigh","low","setLow","tick","console","log","undefined","getTickerData","week52High","week52Low","latestPrice","intQuote","Math","floor","third","mode","scaleID","borderColor","borderWidth","label","backgroundColor","content","enabled","labels","datasets","fill","lineTension","options","title","display","text","fontSize","legend","position","scales","yAxes","scaleLabel","labelString","ticks","callback","index","values","xAxes","annotation","drawTime","annotations","App","src","verticalAlign","alt","Boolean","window","location","hostname","match","action","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1dcb327.chunk.js","sourcesContent":["import changeSymbol from './changeSymbol'\n\nconst allActions = {\n    changeSymbol\n}\n\nexport default allActions","const changeSymbol = (newSymbol) => {\n    return {\n        type: \"CHANGE_SYMBOL\",\n        payload: newSymbol\n    }\n}\n\nexport default changeSymbol;","import React, { useState, useEffect } from 'react';\nimport './Ticker.css';\nimport Button from 'react-bootstrap/Button';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport allActions from '../../redux/actions'\n\nfunction Ticker(props) {\n  const [curinput, setCurinput] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [symbols, setSymbols] = useState(new Set());\n  const dispatch = useDispatch();\n  const currSymbol = useSelector(state => state.currentSymbol)\n\n  useEffect(() => {\n    async function getValidSymbols() {\n      let response = await fetch('https://cloud.iexapis.com/stable/ref-data/iex/symbols?token=' + process.env.REACT_APP_IEX_API_KEY);\n      let data = await response.json();\n      return data;\n    }\n    getValidSymbols().then(data => {\n      setSymbols(new Set(data.map(i => i.symbol)));\n    });  \n  }, []);\n\n  function handleChange(event) {\n    const cleanInput = event.target.value.trim().toUpperCase();\n    if (cleanInput.length <= 5 && symbols.has(cleanInput)) {\n      setDisabled(false);\n    } else{ \n      setDisabled(true);\n    }\n    setCurinput(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    let cleanInput = curinput.trim().toUpperCase();\n    if (cleanInput !== currSymbol) {\n      dispatch(allActions.changeSymbol(cleanInput))\n    }\n    event.preventDefault();\n  }\n\n  return (\n    <div className=\"Ticker-div\"> \n      <form onSubmit={handleSubmit}>\n        <label style={{paddingRight:\"5px\"}}>\n          <input type=\"text\" placeholder=\"Enter Ticker Symbol Here\" value={curinput} onChange={handleChange} className=\"Ticker-searchbar\" />\n        </label>\n        <Button variant=\"outline-primary\" type=\"submit\" disabled={disabled} style={{float:\"center\", borderRadius: \"0px\"}}>Submit</Button>\n      </form>\n    </div>\n  );\n}\n\nexport default Ticker;","import React, { useState, useEffect } from 'react';\nimport './Chart.css';\nimport {Line} from 'react-chartjs-2';\nimport 'chartjs-plugin-annotation';\nimport { useSelector } from 'react-redux'\n\nfunction Chart (props) {\n  let chartLabels = []; \n  let verticalLines = [];\n  let pldata = []\n  let dataLabel = \"\";\n  const [quote, setQuote] = useState(0);\n  const [high, setHigh] = useState(0); \n  const [low, setLow] = useState(0);\n  const symbol = useSelector(state => state.currentSymbol)\n\n  useEffect(() => {\n    async function getTickerData(tick) {\n      console.log(tick);\n      let response = await fetch('https://cloud.iexapis.com/stable/stock/' + tick + '/quote?token=' + process.env.REACT_APP_IEX_API_KEY);\n      let data = await response.json();\n      return data;\n    }\n    if (symbol !== undefined ){\n      getTickerData(symbol).then(data => {\n        setHigh(data.week52High);\n        setLow(data.week52Low);\n        setQuote(data.latestPrice);\n      });\n    }\n  }, [symbol]);\n  \n  if (high !== 0){\n    const intQuote = Math.floor(quote / 5) * 5;\n    let third = (quote - intQuote) * 100 - 150; \n    if (quote < intQuote) { \n      third = -150;\n    }\n    pldata = [-150, -150, third, (high - intQuote) * 100 - 150, 2 * (high - intQuote) * 100 - 150]\n    dataLabel = \"Long \" + intQuote + \" call @ 1.50\";\n    chartLabels = [0, low, quote, high, high + high - quote];\n    verticalLines = [\n      {\n        type: \"line\",\n        mode: \"vertical\",\n        scaleID: \"x-axis-0\",\n        value: 1,\n        borderColor: \"#38677D\",\n        borderWidth: 2,\n        label: {\n          backgroundColor: \"#959296\",\n          content: \"52 wk Low\",\n          enabled: true\n        }\n      },\n      {\n        type: \"line\",\n        mode: \"vertical\",\n        scaleID: \"x-axis-0\",\n        value: 2,\n        borderColor: \"#38677D\",\n        borderWidth: 2,\n        label: {\n          backgroundColor: \"#959296\",\n          content: \"Current Price\",\n          enabled: true\n        }\n      } , \n      {\n        type: \"line\",\n        mode: \"vertical\",\n        scaleID: \"x-axis-0\",\n        value: 3,\n        borderColor: \"#38677D\",\n        borderWidth: 2,\n        label: {\n          backgroundColor: \"#959296\",\n          content: \"52 wk High\",\n          enabled: true\n        }\n      }      \n    ];\n  }\n  const state = {\n    labels: chartLabels,\n    datasets: [\n      {\n        \n        label: dataLabel,\n        fill: false,\n        lineTension: 0,\n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: pldata,\n      }\n    ]\n  }\n\n  return (\n    <div className=\"Chart-div\">\n      <Line\n        data={state}\n        options={{\n          title:{\n            display:true,\n            text: (symbol === undefined ? \"\" : symbol) + \" Profit/Loss Chart\",\n            fontSize:20\n          },\n          legend:{\n            display:true,\n            position:'right'\n          },\n          scales:{\n            yAxes: [{\n              scaleLabel: {\n                display: true, \n                labelString: 'Profit or Loss',\n                fontSize: 18\n              },\n              ticks: {\n                callback: function(value, index, values) { \n                  return '$' + value;\n                }\n              }\n            }],\n            xAxes: [{\n              scaleLabel: {\n                display: true, \n                labelString: 'Price at Expiration',\n                fontSize: 18\n              },\n              ticks: {\n                callback: function(value, index, values) { \n                  return '$' + value;\n                }\n              }\n            }]\n          }, \n          annotation: {\n            drawTime: 'beforeDatasetsDraw',\n            annotations: verticalLines,\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Chart;","import React from 'react';\nimport './App.css';\n//components \nimport Ticker from '../Ticker/Ticker';\nimport Chart from '../Chart/Chart';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          Options Visualizer &nbsp;    \n        <img src={process.env.PUBLIC_URL + '/favicon.ico'} style={{verticalAlign: \"middle\"}} alt=\"Logo\"></img>\n        </div>\n      </header>\n      <Ticker />\n      <Chart />\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const currentSymbol = (state = \"\", action) => {\n  switch (action.type) {\n    case 'CHANGE_SYMBOL':\n      return action.payload\n    default:\n      return state;\n  }\n}\n\nexport default currentSymbol;","import currentSymbol from './currentSymbol'\nimport { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({\n    currentSymbol\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux'\nimport rootReducer from './redux/reducers'\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}