{"version":3,"sources":["components/App/App.js","components/Chart/Chart.js","components/Ticker/Ticker.js","serviceWorker.js","index.js"],"names":["App","console","log","process","cts","require","valid","className","src","style","verticalAlign","alt","Chart","info","chartLabels","verticalLines","pldata","dataLabel","high","intQuote","Math","round","quote","low","type","mode","scaleID","value","borderColor","borderWidth","label","backgroundColor","content","enabled","state","labels","datasets","fill","lineTension","data","options","title","display","text","ticker","fontSize","legend","position","scales","yAxes","scaleLabel","labelString","ticks","callback","index","values","xAxes","annotation","drawTime","annotations","Ticker","useState","curinput","setCurinput","disabled","setDisabled","setTicker","setQuote","setHigh","setLow","finnhub","ApiClient","instance","authentications","apiKey","finnhubClient","DefaultApi","tick","a","fetch","response","json","onSubmit","event","cleanInput","trim","toUpperCase","getHighLow","then","week52High","week52Low","error","c","preventDefault","paddingRight","placeholder","onChange","target","undefined","Button","variant","float","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d314e23c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  console.log(process.env.REACT_APP_IEX_API_KEY);\r\n  let cts = require('check-ticker-symbol');\r\n  console.log(cts.valid('APPL'));\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div>\r\n          Options Visualizer &nbsp;    \r\n        \r\n        <img src={process.env.PUBLIC_URL + '/favicon.ico'} style={{verticalAlign: \"middle\"}} alt=\"Logo\"></img>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState } from 'react';\r\nimport './Chart.css';\r\nimport {Line} from 'react-chartjs-2';\r\nimport 'chartjs-plugin-annotation';\r\nimport { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from 'constants';\r\n\r\n\r\n\r\nfunction Chart(info) {\r\n  let chartLabels = []; \r\n  let verticalLines = [];\r\n  let pldata = []\r\n  let dataLabel = \"\";\r\n\r\n  if (info.high !== 0){\r\n    const intQuote = Math.round(info.quote / 10) * 10;\r\n    pldata = [-150, -150, (info.quote - intQuote) * 100 - 150, (info.high - intQuote) * 100 - 150, 2 * (info.high - intQuote) * 100 - 150]\r\n    dataLabel = \"Long \" + intQuote + \" call @ 1.50\";\r\n    chartLabels = [0, info.low, info.quote, info.high, info.high + info.high - info.quote];\r\n    verticalLines = [\r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 1,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 5,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"52 wk Low\",\r\n          enabled: true\r\n        }\r\n      },\r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 2,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 5,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"Current Price\",\r\n          enabled: true\r\n        }\r\n      } , \r\n      {\r\n        type: \"line\",\r\n        mode: \"vertical\",\r\n        scaleID: \"x-axis-0\",\r\n        value: 3,\r\n        borderColor: \"#38677D\",\r\n        borderWidth: 5,\r\n        label: {\r\n          backgroundColor: \"#959296\",\r\n          content: \"52 wk High\",\r\n          enabled: true\r\n        }\r\n      }      \r\n    ];\r\n  }\r\n  const state = {\r\n    labels: chartLabels,\r\n    datasets: [\r\n      {\r\n        \r\n        label: dataLabel,\r\n        fill: false,\r\n        lineTension: 0,\r\n        backgroundColor: 'rgba(75,192,192,1)',\r\n        borderColor: 'rgba(0,0,0,1)',\r\n        borderWidth: 2,\r\n        data: pldata,\r\n      }\r\n    ]\r\n  }\r\n\r\n  return (\r\n    <div className=\"Chart-div\">\r\n      <Line\r\n        data={state}\r\n        options={{\r\n          title:{\r\n            display:true,\r\n            text: info.ticker + \" Profit/Loss Chart\",\r\n            fontSize:20\r\n          },\r\n          legend:{\r\n            display:true,\r\n            position:'right'\r\n          },\r\n          scales:{\r\n            yAxes: [{\r\n              scaleLabel: {\r\n                display: true, \r\n                labelString: 'Profit or Loss',\r\n                fontSize: 18\r\n              },\r\n              ticks: {\r\n                callback: function(value, index, values) { \r\n                  return '$' + value;\r\n                }\r\n              }\r\n            }],\r\n            xAxes: [{\r\n              scaleLabel: {\r\n                display: true, \r\n                labelString: 'Price at Expiration',\r\n                fontSize: 18\r\n              },\r\n              ticks: {\r\n                callback: function(value, index, values) { \r\n                  return '$' + value;\r\n                }\r\n              }\r\n            }]\r\n          }, \r\n          annotation: {\r\n            drawTime: 'beforeDatasetsDraw',\r\n            annotations: verticalLines,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useState } from 'react';\r\nimport './Ticker.css';\r\nimport Chart from '../Chart/Chart'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Ticker() {\r\n  const [curinput, setCurinput] = useState('');\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [ticker, setTicker] = useState('');\r\n  const [quote, setQuote] = useState('');\r\n  const [high, setHigh] = useState(0); \r\n  const [low, setLow] = useState(0);\r\n\r\n  const finnhub = require('finnhub');\r\n  \r\n  const api_key = finnhub.ApiClient.instance.authentications['api_key'];\r\n  api_key.apiKey = process.env.REACT_APP_API_KEY; \r\n  const finnhubClient = new finnhub.DefaultApi()\r\n   \r\n  function handleChange(event) {\r\n    finnhubClient.quote(event.target.value.trim().toUpperCase(), (error, data, response) => {\r\n      if (data.c !== undefined){ \r\n        setDisabled(false);\r\n      } else{ \r\n        setDisabled(true);\r\n      }\r\n    });\r\n    setCurinput(event.target.value);\r\n  }\r\n  async function getHighLow(tick) { \r\n    let response = await fetch('https://cloud.iexapis.com/stable/stock/' + tick + '/quote?token=' + process.env.REACT_APP_IEX_API_KEY);\r\n    let data = await response.json();\r\n    return data;\r\n  }\r\n  function handleSubmit(event) {\r\n    let cleanInput = curinput.trim().toUpperCase();\r\n    getHighLow(cleanInput).then(data => {\r\n      setHigh(data.week52High);\r\n      setLow(data.week52Low);\r\n    });\r\n    finnhubClient.quote(cleanInput, (error, data, response) => {\r\n      setQuote(data.c)\r\n    });    \r\n    setTicker(cleanInput); \r\n    event.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Ticker-div\"> \r\n        <form onSubmit={handleSubmit}>\r\n          <label style={{paddingRight:\"5px\"}}>\r\n            <input type=\"text\" placeholder=\"Enter Ticker Symbol Here\" value={curinput} onChange={handleChange} className=\"Ticker-searchbar\" />\r\n          </label>\r\n          <Button variant=\"outline-primary\" type=\"submit\" disabled={disabled} style={{float:\"center\", borderRadius: \"0px\"}}>Submit</Button>\r\n        </form>\r\n      </div>\r\n       <Chart ticker={ticker} quote={quote} high={high} low={low} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ticker;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport Ticker from './components/Ticker/Ticker'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    <Ticker />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}